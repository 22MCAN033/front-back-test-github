name: Two-Branch CI/CD Pipeline - Frontend & Backend

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  setup:
    name: Determine Environment & Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      backend_port: ${{ steps.config.outputs.backend_port }}
      frontend_port: ${{ steps.config.outputs.frontend_port }}
      container_prefix: ${{ steps.config.outputs.container_prefix }}
    steps:
      - name: Set Environment Configuration
        id: config
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "backend_port=${{ secrets.PROD_BACKEND_PORT }}" >> $GITHUB_OUTPUT
            echo "frontend_port=${{ secrets.PROD_FRONTEND_PORT }}" >> $GITHUB_OUTPUT
            echo "container_prefix=prod" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "backend_port=${{ secrets.DEV_BACKEND_PORT }}" >> $GITHUB_OUTPUT
            echo "frontend_port=${{ secrets.DEV_FRONTEND_PORT }}" >> $GITHUB_OUTPUT
            echo "container_prefix=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=unknown" >> $GITHUB_OUTPUT
            echo "backend_port=0" >> $GITHUB_OUTPUT
            echo "frontend_port=0" >> $GITHUB_OUTPUT
            echo "container_prefix=unknown" >> $GITHUB_OUTPUT

          fi

  build:
    name: Build Docker Images on EC2
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Fetch EC2 SSH Key
        id: fetch_ssh
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "vaibhav/dev/secret" \
            --query SecretString \
            --output text)
          echo "$SECRET_JSON" | jq -r '.EC2_SSH_KEY' | sed 's/\\n/\n/g' > $RUNNER_TEMP/ssh_key.pem
          chmod 600 $RUNNER_TEMP/ssh_key.pem
          echo "SSH_KEY<<EOF" >> $GITHUB_ENV
          cat $RUNNER_TEMP/ssh_key.pem >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set Build Variables
        run: |
          echo "BUILD_TAG=${{ needs.setup.outputs.container_prefix }}-${{ github.run_id }}" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Send Source Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          source: "."
          target: "/home/ubuntu/app-${{ needs.setup.outputs.container_prefix }}"
          rm: true
          overwrite: true

      - name: Build Docker Images on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -ex
            cd /home/ubuntu/app-${{ needs.setup.outputs.container_prefix }}
            echo "${BUILD_TAG}" > ~/build_tag_${{ needs.setup.outputs.container_prefix }}.txt
            echo "${{ needs.setup.outputs.environment }}" > ~/environment_${{ needs.setup.outputs.container_prefix }}.txt

            echo "Building Backend..."
            sudo docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} --build-arg ENVIRONMENT=${{ needs.setup.outputs.environment }} -t backend-app:${BUILD_TAG} .

            echo "Building Frontend..."
            cd frontend
            sudo docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} --build-arg ENVIRONMENT=${{ needs.setup.outputs.environment }} -t frontend-app:${BUILD_TAG} .

  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment != 'unknown'
    environment:
      name: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Fetch EC2 SSH Key
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "vaibhav/dev/secret" \
            --query SecretString \
            --output text)
          echo "$SECRET_JSON" | jq -r '.EC2_SSH_KEY' | sed 's/\\n/\n/g' > $RUNNER_TEMP/ssh_key.pem
          chmod 600 $RUNNER_TEMP/ssh_key.pem
          echo "SSH_KEY<<EOF" >> $GITHUB_ENV
          cat $RUNNER_TEMP/ssh_key.pem >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Deploy Containers
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -ex
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            if [[ "$BRANCH_NAME" == "main" ]]; then
              CONTAINER_PREFIX="prod"
            else
              CONTAINER_PREFIX="dev"
            fi
            BUILD_TAG=$(cat ~/build_tag_${CONTAINER_PREFIX}.txt)
            BACKEND_PORT=${{ needs.setup.outputs.backend_port }}
            FRONTEND_PORT=${{ needs.setup.outputs.frontend_port }}

            sudo docker stop ${CONTAINER_PREFIX}-backend || true
            sudo docker rm ${CONTAINER_PREFIX}-backend || true
            sudo docker run -d -p ${BACKEND_PORT}:5000 --name ${CONTAINER_PREFIX}-backend --restart unless-stopped -e NODE_ENV=${{ needs.setup.outputs.environment }} backend-app:${BUILD_TAG}

            sudo docker stop ${CONTAINER_PREFIX}-frontend || true
            sudo docker rm ${CONTAINER_PREFIX}-frontend || true
            sudo docker run -d -p ${FRONTEND_PORT}:80 --name ${CONTAINER_PREFIX}-frontend --restart unless-stopped -e ENVIRONMENT=${{ needs.setup.outputs.environment }} frontend-app:${BUILD_TAG}

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: always()
    steps:
      - name: Fetch EC2 SSH Key
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "vaibhav/dev/secret" \
            --query SecretString \
            --output text)
          echo "$SECRET_JSON" | jq -r '.EC2_SSH_KEY' | sed 's/\\n/\n/g' > $RUNNER_TEMP/ssh_key.pem
          chmod 600 $RUNNER_TEMP/ssh_key.pem
          echo "SSH_KEY<<EOF" >> $GITHUB_ENV
          cat $RUNNER_TEMP/ssh_key.pem >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Cleanup Docker Images
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            sudo docker images backend-app --format "{{.Tag}}" | tail -n +3 | xargs -r -I {} sudo docker rmi backend-app:{} || true
            sudo docker images frontend-app --format "{{.Tag}}" | tail -n +3 | xargs -r -I {} sudo docker rmi frontend-app:{} || true
            sudo docker image prune -f
