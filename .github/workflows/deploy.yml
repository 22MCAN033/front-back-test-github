name: Two-Branch CI/CD Pipeline - Frontend & Backend

on:
  push:
    branches:
      - main
      - dev
  # pull_request:
  #   branches:
  #     - main
  #     - dev

jobs:
  prepare_environment:
    name: Prepare environment files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      # - name: Create Frontend .env
      #   run: |
      #     echo "Creating .env file for frontend"
      #     cd frontend
      #     rm -f .env
      #     ls -a
      #     if [ "${GITHUB_REF_NAME}" = "dev" ]; then
            
      #       echo "REACT_APP_APP_NAME=$(aws secretsmanager get-secret-value --secret-id vaibhav/dev/secret --query SecretString --output text | jq -r .DEV_REACT_APP_APP_NAME)" >> .env
      #       echo "REACT_APP_BACKEND_URL=$(aws secretsmanager get-secret-value --secret-id vaibhav/dev/secret --query SecretString --output text | jq -r .DEV_REACT_APP_BACKEND_URL)" >> .env
      #     elif [ "${GITHUB_REF_NAME}" = "main" ]; then
      #       echo "REACT_APP_BACKEND_URL=$(aws secretsmanager get-secret-value --secret-id prod/app/env --query SecretString --output text | jq -r .PROD_REACT_APP_BACKEND_URL)" >> .env
      #       echo "REACT_APP_APP_NAME=$(aws secretsmanager get-secret-value --secret-id prod/app/env --query SecretString --output text | jq -r .PROD_REACT_APP_APP_NAME)" >> .env
      #     fi

      - name: Create Backend .env
        run: |
          echo "Creating .env file for backend"
          cd backend
          rm -f .env
          ls -a
          if [ "${GITHUB_REF_NAME}" = "dev" ]; then
            echo "NODE_ENV=$(aws secretsmanager get-secret-value --secret-id vaibhav/dev/secret --query SecretString --output text | jq -r .DEV_NODE_ENV)" >> .env
            echo "PORT=$(aws secretsmanager get-secret-value --secret-id vaibhav/dev/secret --query SecretString --output text | jq -r .DEV_PORT)" >> .env
          elif [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "DATABASE_URL=$(aws secretsmanager get-secret-value --secret-id prod/app/env --query SecretString --output text | jq -r .PROD_DATABASE_URL)" >> .env
            echo "SECRET_KEY=$(aws secretsmanager get-secret-value --secret-id prod/app/env --query SecretString --output text | jq -r .PROD_SECRET_KEY)" >> .env
          fi

      - name: Upload .env as artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-files
          path: |
            # frontend/.env
            backend/.env
          retention-days: 1



  build:
    name: Build Docker Images on EC2
    runs-on: ubuntu-latest
    needs: prepare_environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Fetch EC2 SSH Key
        id: fetch_ssh
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "vaibhav/dev/secret" \
            --query SecretString \
            --output text)
          echo "$SECRET_JSON" | jq -r '.EC2_SSH_KEY' | sed 's/\\n/\n/g' > $RUNNER_TEMP/ssh_key.pem
          chmod 600 $RUNNER_TEMP/ssh_key.pem
          echo "SSH_KEY<<EOF" >> $GITHUB_ENV
          cat $RUNNER_TEMP/ssh_key.pem >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Source Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          source: "."
          target: "/home/ubuntu/app-${GITHUB_REF_NAME}"
          rm: true
          overwrite: true

      - name: Build Docker Images on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          envs: GITHUB_REF_NAME
          script: |
            set -ex
            APP_DIR=/home/ubuntu/app-${GITHUB_REF_NAME}
            cd $APP_DIR

            BUILD_TAG="${GITHUB_REF_NAME}-${GITHUB_RUN_ID}"
            BUILD_TIMESTAMP=$(date +%Y%m%d%H%M%S)

            echo "${BUILD_TAG}" > $APP_DIR/build_tag_${GITHUB_REF_NAME}.txt
            echo "${GITHUB_REF_NAME}" > $APP_DIR/environment_${GITHUB_REF_NAME}.txt

            echo "🏗️ Building Backend..."
            sudo docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} --build-arg ENVIRONMENT=${GITHUB_REF_NAME} -t backend-app:${BUILD_TAG} .

            echo "🏗️ Building Frontend..."
            cd frontend
            sudo docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} --build-arg ENVIRONMENT=${GITHUB_REF_NAME} -t frontend-app:${BUILD_TAG} .

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
  
      - name: Fetch EC2 SSH Key
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "vaibhav/dev/secret" \
            --region eu-north-1 \
            --query SecretString \
            --output text)
          echo "$SECRET_JSON" | jq -r '.EC2_SSH_KEY' | sed 's/\\n/\n/g' > $RUNNER_TEMP/ssh_key.pem
          chmod 600 $RUNNER_TEMP/ssh_key.pem
          echo "SSH_KEY<<EOF" >> $GITHUB_ENV
          cat $RUNNER_TEMP/ssh_key.pem >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
  
      - name: Deploy Containers
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          envs: GITHUB_REF_NAME
          script: |
            set -ex
            APP_DIR=/home/ubuntu/app-${GITHUB_REF_NAME}
            CONTAINER_PREFIX=${GITHUB_REF_NAME}
      
            BUILD_TAG=$(cat $APP_DIR/build_tag_${CONTAINER_PREFIX}.txt)
      
            if [ "${GITHUB_REF_NAME}" = "main" ]; then
              export BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
              export FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
            elif [ "${GITHUB_REF_NAME}" = "dev" ]; then
              export BACKEND_PORT=${{ secrets.DEV_BACKEND_PORT }}
              export FRONTEND_PORT=${{ secrets.DEV_FRONTEND_PORT }}
            else
              echo "❌ Unknown branch: ${GITHUB_REF_NAME}"
              exit 1
            fi
      
            echo "🚀 Deploying containers on ports Backend:${BACKEND_PORT} Frontend:${FRONTEND_PORT}..."
      
            sudo docker stop ${CONTAINER_PREFIX}-backend || true
            sudo docker rm ${CONTAINER_PREFIX}-backend || true
            sudo docker run -d -p ${BACKEND_PORT}:5000 \
              --name ${CONTAINER_PREFIX}-backend \
              --restart unless-stopped \
              -e NODE_ENV=${GITHUB_REF_NAME} \
              backend-app:${BUILD_TAG}
      
            sudo docker stop ${CONTAINER_PREFIX}-frontend || true
            sudo docker rm ${CONTAINER_PREFIX}-frontend || true
            sudo docker run -d -p ${FRONTEND_PORT}:80 \
              --name ${CONTAINER_PREFIX}-frontend \
              --restart unless-stopped \
              -e ENVIRONMENT=${GITHUB_REF_NAME} \
              frontend-app:${BUILD_TAG}

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Fetch EC2 SSH Key
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "vaibhav/dev/secret" \
            --region eu-north-1 \
            --query SecretString \
            --output text)
          echo "$SECRET_JSON" | jq -r '.EC2_SSH_KEY' | sed 's/\\n/\n/g' > $RUNNER_TEMP/ssh_key.pem
          chmod 600 $RUNNER_TEMP/ssh_key.pem
          echo "SSH_KEY<<EOF" >> $GITHUB_ENV
          cat $RUNNER_TEMP/ssh_key.pem >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Cleanup Docker Images
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            echo "🧹 Cleaning up old Docker images..."
            sudo docker images backend-app --format "{{.Tag}}" | grep '^dev-' | tail -n +3 | xargs -r -I {} sudo docker rmi backend-app:{} || true
            sudo docker images backend-app --format "{{.Tag}}" | grep '^main-' | tail -n +3 | xargs -r -I {} sudo docker rmi backend-app:{} || true
            sudo docker images frontend-app --format "{{.Tag}}" | grep '^dev-' | tail -n +3 | xargs -r -I {} sudo docker rmi frontend-app:{} || true
            sudo docker images frontend-app --format "{{.Tag}}" | grep '^main-' | tail -n +3 | xargs -r -I {} sudo docker rmi frontend-app:{} || true
            echo "✅ Cleanup completed!"

  notify:
    name: Send Deployment Completion Email
    runs-on: ubuntu-latest
    needs: cleanup
    if: always()
    steps:
      - name: Set Email Content
        id: email_content
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
      
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "SUBJECT=✅ CI/CD Deployment Completed - PRODUCTION" >> $GITHUB_ENV
            echo "BODY=CI/CD pipeline for branch 'main' completed successfully on PRODUCTION." >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "SUBJECT=✅ CI/CD Deployment Completed - DEVELOPMENT" >> $GITHUB_ENV
            echo "BODY=CI/CD pipeline for branch 'dev' completed successfully on DEVELOPMENT." >> $GITHUB_ENV
          else
            echo "SUBJECT=⚠️ CI/CD Deployment Completed - UNKNOWN BRANCH" >> $GITHUB_ENV
            echo "BODY=CI/CD pipeline ran on an unknown branch: $BRANCH_NAME." >> $GITHUB_ENV
          fi

      - name: Send Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ env.SUBJECT }}
          body: ${{ env.BODY }}
          to: "team@example.com"
          from: "GitHub Actions <${{ secrets.EMAIL_USER }}>"
          secure: true
