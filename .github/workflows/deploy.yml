name: CI/CD Pipeline - Frontend & Backend (Direct EC2)
on:
  push:
    branches:
      - main

jobs:
  # ------------------- BUILD PHASE -------------------
  build:
    name: Build Docker Images (Frontend & Backend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Backend Docker Image
        run: |
          cd backend
          BUILD_TAG="build-${{ github.run_id }}"
          BUILD_TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "Building backend image..."
          docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} -t backend-app:${BUILD_TAG} .
          echo "✅ Backend build completed successfully"
          
      - name: Build Frontend Docker Image
        run: |
          cd frontend
          BUILD_TAG="build-${{ github.run_id }}"
          BUILD_TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "Building frontend image..."
          docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} -t frontend-app:${BUILD_TAG} .
          echo "✅ Frontend build completed successfully"

  # ------------------- DEPLOY PHASE -------------------
  deploy:
    name: Deploy Frontend & Backend to EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create app directory
            mkdir -p ~/app
            cd ~/app
            
            # Clone or update repository
            if [ -d ".git" ]; then
              echo "🔄 Updating existing repository..."
              git fetch origin
              git reset --hard origin/main
              git pull origin main
            else
              echo "📥 Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Generate build tag and timestamp
            BUILD_TAG="build-${{ github.run_id }}"
            BUILD_TIMESTAMP=$(date +%Y%m%d%H%M%S)
            echo "🏗️ Starting deployment with Build Tag: ${BUILD_TAG}"
            
            # ------------------- BACKEND DEPLOYMENT -------------------
            if [ -d "backend" ]; then
              echo "🚀 Deploying Backend..."
              cd ~/app/backend
              
              # Build backend image
              sudo docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} -t backend-app:${BUILD_TAG} .
              
              # Stop and remove existing backend container
              sudo docker stop backend 2>/dev/null || echo "No existing backend container to stop"
              sudo docker rm backend 2>/dev/null || echo "No existing backend container to remove"
              
              # Run new backend container
              sudo docker run -d -p 5000:5000 --name backend --restart unless-stopped backend-app:${BUILD_TAG}
              
              # Verify backend is running
              if sudo docker ps | grep -q "backend"; then
                echo "✅ Backend deployed successfully and running on port 5000"
              else
                echo "❌ Backend deployment failed"
                exit 1
              fi
            else
              echo "❌ Backend directory not found in repository"
              exit 1
            fi
            
            # ------------------- FRONTEND DEPLOYMENT -------------------
            if [ -d "frontend" ]; then
              echo "🚀 Deploying Frontend..."
              cd ~/app/frontend
              
              # Build frontend image
              sudo docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} -t frontend-app:${BUILD_TAG} .
              
              # Stop and remove existing frontend container
              sudo docker stop frontend 2>/dev/null || echo "No existing frontend container to stop"
              sudo docker rm frontend 2>/dev/null || echo "No existing frontend container to remove"
              
              # Run new frontend container
              sudo docker run -d -p 3000:3000 --name frontend --restart unless-stopped frontend-app:${BUILD_TAG}
              
              # Verify frontend is running
              if sudo docker ps | grep -q "frontend"; then
                echo "✅ Frontend deployed successfully and running on port 3000"
              else
                echo "❌ Frontend deployment failed"
                exit 1
              fi
            else
              echo "❌ Frontend directory not found in repository"
              exit 1
            fi
            
            # ------------------- DEPLOYMENT SUMMARY -------------------
            echo ""
            echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY! 🎉"
            echo "==========================================="
            echo "📦 Build Tag: ${BUILD_TAG}"
            echo "⏰ Build Timestamp: ${BUILD_TIMESTAMP}"
            echo "🌐 Frontend: http://$(curl -s ifconfig.me 2>/dev/null || echo 'YOUR_EC2_IP'):3000"
            echo "🔧 Backend: http://$(curl -s ifconfig.me 2>/dev/null || echo 'YOUR_EC2_IP'):5000"
            echo ""
            echo "📊 Running Containers:"
            sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo ""
            echo "💾 Docker Images:"
            sudo docker images | grep -E "(frontend-app|backend-app)" | head -5
