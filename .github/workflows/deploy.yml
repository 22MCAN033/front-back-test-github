name: Two-Branch CI/CD Pipeline - Frontend & Backend

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  # ------------------- SETUP PHASE ----------------
  setup:
    name: Determine Environment & Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      backend_port: ${{ steps.config.outputs.backend_port }}
      frontend_port: ${{ steps.config.outputs.frontend_port }}
      container_prefix: ${{ steps.config.outputs.container_prefix }}
    steps:
      - name: Set Environment Configuration
        id: config
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "backend_port=5000" >> $GITHUB_OUTPUT
            echo "frontend_port=3000" >> $GITHUB_OUTPUT
            echo "container_prefix=prod" >> $GITHUB_OUTPUT
            echo "🚀 Deploying to PRODUCTION environment"
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "backend_port=5001" >> $GITHUB_OUTPUT
            echo "frontend_port=3001" >> $GITHUB_OUTPUT
            echo "container_prefix=dev" >> $GITHUB_OUTPUT
            echo "🧪 Deploying to DEVELOPMENT environment"
          else
            echo "environment=unknown" >> $GITHUB_OUTPUT
            echo "backend_port=0" >> $GITHUB_OUTPUT
            echo "frontend_port=0" >> $GITHUB_OUTPUT
            echo "container_prefix=unknown" >> $GITHUB_OUTPUT
            echo "⚠️ Branch not recognized, skipping deploy"
          fi

  # ------------------- BUILD PHASE ----------------
  build:
    name: Build Docker Images on EC2
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Build Variables
        id: vars
        run: |
          BUILD_TAG="${{ needs.setup.outputs.container_prefix }}-${{ github.run_id }}"
          BUILD_TIMESTAMP=$(date +%Y%m%d%H%M%S)

          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=${BUILD_TIMESTAMP}" >> $GITHUB_ENV

          echo "Build Tag: ${BUILD_TAG}"
          echo "Environment: ${{ needs.setup.outputs.environment }}"

      - name: Send Source Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "~/app-${{ needs.setup.outputs.container_prefix }}"
          rm: true

      - name: Build Docker Images on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/app-${{ needs.setup.outputs.container_prefix }}
            BUILD_TAG="${{ env.BUILD_TAG }}"
            BUILD_TIMESTAMP="${{ env.BUILD_TIMESTAMP }}"
            ENVIRONMENT="${{ needs.setup.outputs.environment }}"

            echo "🔨 Building images for ${ENVIRONMENT} environment"
            echo "📦 Build Tag: ${BUILD_TAG}"

            # ------------------- BACKEND BUILD -------------------
            echo "🏗️  Building Backend..."
            sudo docker build --no-cache \
              --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} \
              --build-arg ENVIRONMENT=${ENVIRONMENT} \
              -t backend-app:${BUILD_TAG} .

            # ------------------- FRONTEND BUILD -------------------
            echo "🏗️  Building Frontend..."
            cd frontend
            sudo docker build --no-cache \
              --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} \
              --build-arg ENVIRONMENT=${ENVIRONMENT} \
              -t frontend-app:${BUILD_TAG} .

            # Store build info
            echo "${BUILD_TAG}" > ~/build_tag_${{ needs.setup.outputs.container_prefix }}.txt
            echo "${ENVIRONMENT}" > ~/environment_${{ needs.setup.outputs.container_prefix }}.txt

            echo "✅ Build completed successfully!"

  # ------------------- DEPLOY PHASE ----------------
  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment != 'unknown'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Deploy Containers on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            BUILD_TAG=$(cat ~/build_tag_${{ needs.setup.outputs.container_prefix }}.txt)
            ENVIRONMENT=$(cat ~/environment_${{ needs.setup.outputs.container_prefix }}.txt)
            CONTAINER_PREFIX="${{ needs.setup.outputs.container_prefix }}"
            BACKEND_PORT="${{ needs.setup.outputs.backend_port }}"
            FRONTEND_PORT="${{ needs.setup.outputs.frontend_port }}"

            echo "🚀 Deploying to ${ENVIRONMENT} environment"
            echo "📦 Build Tag: ${BUILD_TAG}"
            echo "🏷️  Container Prefix: ${CONTAINER_PREFIX}"

            # ------------------- BACKEND DEPLOYMENT -------------------
            echo "🔄 Deploying Backend on port ${BACKEND_PORT}..."
            sudo docker stop ${CONTAINER_PREFIX}-backend 2>/dev/null || true
            sudo docker rm ${CONTAINER_PREFIX}-backend 2>/dev/null || true

            sudo docker run -d \
              -p ${BACKEND_PORT}:5000 \
              --name ${CONTAINER_PREFIX}-backend \
              --restart unless-stopped \
              -e NODE_ENV=${ENVIRONMENT} \
              backend-app:${BUILD_TAG}

            sleep 10
            if sudo docker ps | grep -q "${CONTAINER_PREFIX}-backend"; then
              echo "✅ Backend container is running"
            else
              echo "❌ Backend container failed to start"
              sudo docker logs ${CONTAINER_PREFIX}-backend
              exit 1
            fi

            # ------------------- FRONTEND DEPLOYMENT -------------------
            echo "🔄 Deploying Frontend on port ${FRONTEND_PORT}..."
            sudo docker stop ${CONTAINER_PREFIX}-frontend 2>/dev/null || true
            sudo docker rm ${CONTAINER_PREFIX}-frontend 2>/dev/null || true

            sudo docker run -d \
              -p ${FRONTEND_PORT}:80 \
              --name ${CONTAINER_PREFIX}-frontend \
              --restart unless-stopped \
              -e ENVIRONMENT=${ENVIRONMENT} \
              frontend-app:${BUILD_TAG}

            sleep 10
            if sudo docker ps | grep -q "${CONTAINER_PREFIX}-frontend"; then
              echo "✅ Frontend container is running"
            else
              echo "❌ Frontend container failed to start"
              sudo docker logs ${CONTAINER_PREFIX}-frontend
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"

  # ------------------- CLEANUP PHASE ----------------
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: Clean up old Docker images
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🧹 Cleaning up old Docker images..."
            sudo docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | grep -E "(backend-app|frontend-app|REPOSITORY)"

            echo "🗑️  Removing old images (keeping latest 2 per app)..."
            sudo docker images backend-app --format "{{.Tag}}" | tail -n +3 | xargs -r -I {} sudo docker rmi backend-app:{} 2>/dev/null || echo "No old backend images to remove"
            sudo docker images frontend-app --format "{{.Tag}}" | tail -n +3 | xargs -r -I {} sudo docker rmi frontend-app:{} 2>/dev/null || echo "No old frontend images to remove"
            sudo docker image prune -f
            echo "✅ Cleanup completed!"
