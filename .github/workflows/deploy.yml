name: Two-Branch CI/CD Pipeline - Frontend & Backend

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  # ------------------- SETUP PHASE ----------------
  setup:
    name: Determine Environment & Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      backend_port: ${{ steps.config.outputs.backend_port }}
      frontend_port: ${{ steps.config.outputs.frontend_port }}
      container_prefix: ${{ steps.config.outputs.container_prefix }}
    steps:
      - name: Set Environment Configuration
        id: config
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "backend_port=5000" >> $GITHUB_OUTPUT
            echo "frontend_port=3000" >> $GITHUB_OUTPUT
            echo "container_prefix=prod" >> $GITHUB_OUTPUT
            echo "üöÄ Deploying to PRODUCTION environment"
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "backend_port=5001" >> $GITHUB_OUTPUT
            echo "frontend_port=3001" >> $GITHUB_OUTPUT
            echo "container_prefix=dev" >> $GITHUB_OUTPUT
            echo "üß™ Deploying to DEVELOPMENT environment"
          else
            echo "environment=unknown" >> $GITHUB_OUTPUT
            echo "backend_port=0" >> $GITHUB_OUTPUT
            echo "frontend_port=0" >> $GITHUB_OUTPUT
            echo "container_prefix=unknown" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Branch not recognized, skipping deploy"
          fi

  # ------------------- BUILD PHASE ----------------
  build:
    name: Build Docker Images on EC2
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ------------------- CONFIGURE AWS ----------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Fetch EC2 Secrets from AWS Secrets Manager
        id: fetch_secrets
        run: |
          echo "Fetching secrets from AWS Secrets Manager..."
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id vaibhav-secret \
            --query SecretString \
            --output text)
          
          # Export as GitHub environment variables
          echo "EC2_HOST=$(echo "$SECRET_JSON" | jq -r .EC2_HOST)" >> $GITHUB_ENV
          echo "EC2_SSH_KEY=$(echo "$SECRET_JSON" | jq -r .EC2_SSH_KEY)" >> $GITHUB_ENV

      - name: Prepare SSH Key
        run: |
          echo "$EC2_SSH_KEY" > key.pem
          chmod 600 key.pem
          echo "‚úÖ SSH key prepared with proper permissions"

      - name: Set Build Variables
        id: vars
        run: |
          BUILD_TAG="${{ needs.setup.outputs.container_prefix }}-${{ github.run_id }}"
          BUILD_TIMESTAMP=$(date +%Y%m%d%H%M%S)

          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=${BUILD_TIMESTAMP}" >> $GITHUB_ENV

          echo "Build Tag: ${BUILD_TAG}"
          echo "Environment: ${{ needs.setup.outputs.environment }}"

      - name: Send Source Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: key.pem
          source: "."
          target: "~/app-${{ needs.setup.outputs.container_prefix }}"
          rm: true

      - name: Build Docker Images on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: key.pem
          script: |
            set -e
            cd ~/app-${{ needs.setup.outputs.container_prefix }}
            BUILD_TAG="${{ env.BUILD_TAG }}"
            BUILD_TIMESTAMP="${{ env.BUILD_TIMESTAMP }}"
            ENVIRONMENT="${{ needs.setup.outputs.environment }}"
            
            # Backend Build
            echo "üèóÔ∏è  Building Backend..."
            sudo docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} --build-arg ENVIRONMENT=${ENVIRONMENT} -t backend-app:${BUILD_TAG} .
            
            # Frontend Build
            echo "üèóÔ∏è  Building Frontend..."
            cd frontend
            sudo docker build --no-cache --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} --build-arg ENVIRONMENT=${ENVIRONMENT} -t frontend-app:${BUILD_TAG} .
            
            echo "‚úÖ Build completed"

  # ------------------- DEPLOY PHASE ----------------
  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment != 'unknown'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Deploy Containers on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: key.pem
          script: |
            set -e
            BUILD_TAG=$(cat ~/build_tag_${{ needs.setup.outputs.container_prefix }}.txt)
            ENVIRONMENT=$(cat ~/environment_${{ needs.setup.outputs.container_prefix }}.txt)
            CONTAINER_PREFIX="${{ needs.setup.outputs.container_prefix }}"
            BACKEND_PORT="${{ needs.setup.outputs.backend_port }}"
            FRONTEND_PORT="${{ needs.setup.outputs.frontend_port }}"

            echo "üöÄ Deploying ${ENVIRONMENT} environment"
            # Backend Deployment
            sudo docker stop ${CONTAINER_PREFIX}-backend || true
            sudo docker rm ${CONTAINER_PREFIX}-backend || true
            sudo docker run -d -p ${BACKEND_PORT}:5000 --name ${CONTAINER_PREFIX}-backend --restart unless-stopped -e NODE_ENV=${ENVIRONMENT} backend-app:${BUILD_TAG}
            sleep 10

            # Frontend Deployment
            sudo docker stop ${CONTAINER_PREFIX}-frontend || true
            sudo docker rm ${CONTAINER_PREFIX}-frontend || true
            sudo docker run -d -p ${FRONTEND_PORT}:80 --name ${CONTAINER_PREFIX}-frontend --restart unless-stopped -e ENVIRONMENT=${ENVIRONMENT} frontend-app:${BUILD_TAG}
            sleep 10

            echo "üéâ Deployment completed!"
